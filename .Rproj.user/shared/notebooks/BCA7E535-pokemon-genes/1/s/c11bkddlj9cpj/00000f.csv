"0","df_gene <- df |> 
  filter(is_pokemon) |> 
  filter(!Name %in% c(""Buried Fossil"", ""Morty"")) |> 
  # select(Name, Type2) |> 
  mutate(
    Name = 
      str_replace(
        Name, ""\\s+"", "" ""
      ) |> # Garados* δ EX Holon Phantoms 102/110 includes two spaces :(
      str_replace(""Dartix"", ""Dartrix"") |> 
      str_replace(""\\sForm\\s"", "" Forme "") |> 
      str_replace(""Melmetal\\sV"", ""MelmetalV"") |> 
      str_replace(""Exeggutor\\sV"", ""ExeggutorV"") |> 
      str_replace(""Hatternee"", ""Hatterene"") |> 
      str_replace(""Primal KyogreEK"", ""Primal KyogreEX"") |> 
      str_replace(""StaraptorFCLV.X"", ""StaraptorFBLV.X"") |>
      str_replace(""Sirfetch’d"", ""Sirfetch'd"") |> 
      str_replace(""Castform\\sRain\\s"", ""Castform Rainy\\s""), # TODO: move this to df typo
    nm = Name
  ) |> 
  mutate(
    is_gx = 
      str_detect(
        nm,
        ""gx$|GX$""
      ),
    nm = # remove GX from name
      str_replace(
        nm,
        ""GX$"",
        """"
      ),
    nm = # remove ""L"" from legend team poke's and them only
      str_replace( 
      nm,
      ""(?<=\\&\\s[:alpha:]{3,13})L$"",
      """"
    ),
    is_team = 
      str_detect(
        nm,
        ""\\s\\&\\s""),
    is_tag_team = is_team & is_gx,
    # though not properly named, Entei & Raikou is Legend
    # https://bulbapedia.bulbagarden.net/wiki/Entei_%26_Raikou_LEGEND_(Unleashed_90)
    is_legend = is_team & !is_gx, 
    
    ) |>
  separate(
    col = nm,
    sep = ""\\s\\&\\s"",
    into = c(""nm"", ""team_buddy1"", ""team_buddy2"")
           ) |> 
  mutate(
    is_ex = str_detect(nm, ""\\sex$|EX$|\\sex""),
    nm = str_replace(nm, ""\\sex$|EX$|\\sex"", """"),
    has_master = str_detect(nm, ""^.+\\'s\\s""),
    master = str_extract(nm, ""^.+(?=\\'s\\s)""),
    nm = str_replace(nm, ""^.+\\'s\\s"", """"),
    is_dark = str_detect(nm, ""Dark\\s""),
    nm = str_replace(nm, ""Dark\\s"", """"),
    is_delta = str_detect(nm, ""\\sδ""), 
    nm = str_replace(nm, ""\\s{0,3}δ"", """"),
    is_light = str_detect(nm, ""^Light\\s""),
    nm = str_replace(nm, ""^Light\\s"", """"),
    is_star = str_detect(nm, ""\\*$""),
    nm = str_replace(nm, ""\\*$"", """"),
    is_bros = str_detect(nm, ""\\sBros\\.$""),
    nm = str_replace(nm, ""\\sBros\\.$"", """"),
    is_levelten = str_detect(nm, ""\\s?LV\\.X""),
    nm = str_replace(nm, ""\\s?LV\\.X"", """"),
    is_ginga = str_detect(nm, ""\\s?G$""),
    nm = str_replace(nm, ""\\s?G$"", """"),
    is_gymleader = str_detect(nm, ""\\s?GL$""),
    nm = str_replace(nm, ""\\s?GL$"", """"),
    is_elitefour = str_detect(nm, ""\\s?4$""),
    nm = str_replace(nm, ""\\s?4$"", """"),
    is_champion = str_detect(nm, ""C$""),
    nm = str_replace(nm, ""\\s?C$"", """"),
    is_frontierbrain = str_detect(nm, ""\\s?FB$""),
    nm = str_replace(nm, ""\\s?FB$"", """"),
    is_break = str_detect(nm, ""\\s?BREAK""),
    nm = str_replace(nm, ""\\s?BREAK"", """"),
    is_primal = str_detect(nm, ""^Primal\\s""),
    nm = str_replace(nm, ""^Primal\\s"", """"),
    is_alolan = str_detect(nm, ""^Alolan\\s""),
    nm = str_replace(nm, ""^Alolan\\s"", """"),
    is_galarian = str_detect(nm, ""^Galarian\\s""),
    nm = str_replace(nm, ""^Galarian\\s"", """"),
    is_hisuian = str_detect(nm, ""^Hisuian\\s""),
    nm = str_replace(nm, ""^Hisuian\\s"", """"),
    is_v_family = str_detect(nm, ""V$|VMAX$|VUNION$|VSTAR$""),
    is_v = str_detect(nm, ""(?<=[:lower:])V$""),
    nm = str_replace(nm, ""(?<=[:lower:])V$"", """"), # avoid ""Unown V""
    is_vmax = str_detect(nm, ""VMAX$""),
    nm = str_replace(nm, ""VMAX$"", """"),
    is_vunion = str_detect(nm, ""VUNION$""),
    nm = str_replace(nm, ""VUNION$"", """"),
    is_vstar = str_detect(nm, ""VSTAR$""),
    nm = str_replace(nm, ""VSTAR$"", """"),
    is_prismstar = str_detect(nm, ""♦$""),
    nm = str_replace(nm, ""♦$"", """"),
    is_mega = str_detect(nm, ""^M(?=[:upper:])|^Mega\\s""),
    nm = str_replace(nm, ""^M(?=[:upper:])|^Mega\\s"", """"),
    
    is_originform = str_detect(nm, ""^Origin\\sForme\\s""),
    nm = str_replace(nm, ""^Origin\\sForme\\s"", """"),
    is_shining = str_detect(nm, ""^Shining\\s""),
    nm = str_replace(nm, ""^Shining\\s"", """"),
    is_specialdelivery = str_detect(nm, ""^Special\\sDelivery\\s""),
    nm = str_remove(nm, ""^Special\\sDelivery\\s""),
    # LEGEND, L and LEGEND 
    is_legend = is_legend | str_detect(nm, ""LEGEND$""),
    nm = str_replace(nm, ""LEGEND$"", """"),
    
    # extract formes
    # kyurem_colour = 
    # Unown includes ! and 
    forme_variant = 
      str_extract(
        nm, 
        ""(?<=Shellos).+|(?<=Gastrodon).+|(?<=Wormadam).+|(?<=Burmy).+|(?<=Unown).+|(?<=Castform).+|.+(?=Castform)|(?<=Ditto).+|(?<=Deoxys).+|.+(?=Necrozma$)|.+(?=Porygon$)|.+(?=Greninja$)|.+(?=Mewtwo$)|.+(?=Urshifu$)|.+(?=Calyrex$)|.+(?=Kyurem)|.+(?=Rotom)|Detective\\s|Radiant\\s|\\sLibre|Sunny\\s|Surfing\\s|Flying\\s"") |> 
      str_remove(""^\\s|\\s$""), # remove spaces before and after formes
    nm =
      str_remove(
        nm, 
        ""(?<=Shellos).+|(?<=Gastrodon).+|(?<=Wormadam).+|(?<=Burmy).+|(?<=Unown).+|(?<=Castform).+|.+(?=Castform)|(?<=Ditto).+|(?<=Deoxys).+|.+(?=Necrozma$)|.+(?=Porygon$)|.+(?=Greninja$)|.+(?=Mewtwo$)|.+(?=Urshifu$)|.+(?=Calyrex$)|.+(?=Kyurem)|.+(?=Rotom)|Detective\\s|Radiant\\s|\\sLibre|Sunny\\s|Surfing\\s|Flying\\s""
    ),
  ) |> 
  left_join(df_names, by = c(""nm"" = ""name"")) |> 
  rename(pokemon_name = nm)
"
"2","Warning: Expected 3 pieces. Missing pieces filled with `NA` in 12713 rows [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, ...]."
