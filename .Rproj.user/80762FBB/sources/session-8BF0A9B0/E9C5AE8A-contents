---
title: "R Notebook"
output: html_notebook
---

# library

```{r}
library(googlesheets4)
library(tidyverse)
library(magrittr)
library(lubridate)
library(readxl)
library(ggbeeswarm)
```

# data

## googlesheets4

too slow, don't run

```{r}
ss_input <- "https://docs.google.com/spreadsheets/d/1IkplPAxSxqEW8qIKH_KW3cDp7C261kNZ-AX-AmCxnMY/edit#gid=840081758"
ss_output <- "https://docs.google.com/spreadsheets/d/1VcVuCtDyKI5oqGsWJPKJGO7y-vIVZge6JrRqrE_kAQY/edit#gid=0"
gs4_get(ss) # 126 sheets
sheet_names <- sheet_names(ss_input)
sheet_names2 <- sheet_names[-1] # remove "Overview" sheet

test <- range_read(ss = ss, sheet = sheet_names2[2], range = "B1:B2")
test |> pull()
release_dates <- 
  sheet_names2 |> 
  map(~ range_read(ss = ss_input, sheet = .x, range = "B1:B2")) |> 
  map(~ pull(.x)) # takes time and occasionally throws 429RESOURCE_EXHAUSTED error, but works eventually after several iteration


release_dates |> reduce(c) # use reduce() instead of unlist(), cf. https://stackoverflow.com/questions/15659783/why-does-unlist-kill-dates-in-r

# now retrieve the pokemon data
sheet_list <- map(
  sheet_names2, 
  ~ range_read(
      ss = ss_input,
      sheet = .x,
      skip = 3
    )
) 

# merge release_dates vector as a repeating column in each of the tibbles in the sheet_list list

# sheet_list2 <-
#   map2(.x = release_dates,
#        .y = sheet_list,
#        .f = omg)
```

## use read_xlsx

### release dates, series name

```{r}
excel_path <- "./input/Pokemon TCG Spreadsheet V3.25.xlsx"
sheet_names <- excel_sheets(excel_path)
sheet_names2 <- sheet_names[-1]

release_dates <- 
  map(
    sheet_names2,
    ~ read_xlsx(
      excel_path,
      sheet = .x, 
      range = "B1:B2"
    )
  ) |> 
  map(~ pull(.x)) |> 
  reduce(c)
release_dates_df <- 
  tibble(
    series = sheet_names2, 
    release_date = release_dates
  )
release_dates_df
overview_series_range <- c(
  "D4:D12",
  "G4:G11",
  "J4:J26",
  "M4:M22",
  "D31:D43",
  "G31:G50",
  "J31:J47",
  "M31:M46"
  )
series_gen <- 
  map(
    .x = overview_series_range,
    ~ read_xlsx(
      excel_path,
      col_names = "series",
      sheet = "Overview", 
      range = .x
    )
  ) |> 
  map2(
    .y = 1:8,
    ~ mutate(.data = .x, gen = rep(.y, nrow(.x)))
  ) |> 
  bind_rows()
release_dates_df2 <- 
  left_join(release_dates_df, series_gen, by = "series") |> 
  arrange(release_date) |> 
  mutate(
    lead = lead(gen),
    gen = if_else(is.na(gen), lead, gen),
    lead = NULL) 
View(release_dates_df2)


```
#### release date, main expansion or not, from bulbagarden

[Convert Wiki Tables to CSV](https://wikitable2csv.ggor.de/)を使って、Table Selectorを`.sortable`に設定して[bulbagarden](https://bulbapedia.bulbagarden.net/wiki/List_of_Pok%C3%A9mon_Trading_Card_Game_expansions)のテーブルを入手する。
|csv no.|content|name|
|===|===|===|
|1|Main expansions|`List_of_Pok%C3%A9mon_Trading_Card_Game_expansions_1.csv`|
|2|Special expansions|`List_of_Pok%C3%A9mon_Trading_Card_Game_expansions_2.csv`|
|3|Black Star Promos|`List_of_Pok%C3%A9mon_Trading_Card_Game_expansions_3.csv`|
|4|POP Series|`List_of_Pok%C3%A9mon_Trading_Card_Game_expansions_4.csv`|
|5|McDonald's Collections|`List_of_Pok%C3%A9mon_Trading_Card_Game_expansions_5.csv`|


```{r}
series_main_expansions_df <- read_csv(
  file = "./input/List_of_Pok%C3%A9mon_Trading_Card_Game_expansions_1.csv"
) |> 
  mutate(series_class = "Main Expansion")
colnames(series_main_expansions_df)
series_special_expansions_df <- read_csv(
  file = "./input/List_of_Pok%C3%A9mon_Trading_Card_Game_expansions_2.csv"
) |> 
  mutate(series_class = "Special Expansion")
series_black_star_promos_df <- read_csv(
  file = "./input/List_of_Pok%C3%A9mon_Trading_Card_Game_expansions_3.csv"
) |> 
  mutate(series_class = "Black Star Promo")
series_pop_series_df <- read_csv(
  file = "./input/List_of_Pok%C3%A9mon_Trading_Card_Game_expansions_4.csv"
) |> 
  mutate(series_class = "Pop Series")
series_mcdonalds_df <- read_csv(
  file = "./input/List_of_Pok%C3%A9mon_Trading_Card_Game_expansions_5.csv"
) |> 
  mutate(series_class = "McDonalds Collection",
         `EN cards` = as.character(`EN cards`))
series_mcdonalds_df
series_classification_df <- bind_rows(
  series_main_expansions_df, 
  series_special_expansions_df, 
  series_black_star_promos_df,
  series_pop_series_df,
  series_mcdonalds_df)
```

#### merge with release dates df

`series_classification_df `と`release_dates_df2`を合体させたい。
```{r}
series_classification_df |> colnames()
release_dates_df2 |> colnames()
str_view_all("October, 2003 - September, 2006 ", ".+(?=\\s-)")
str_view_all("September 7, 2018 ", "\\s\\*\\s|(?<=[a-z]{3,10}\\s\\d{4})\\s")

str_view_all(
  "January, 2003 - February, 2004 February, 2004 - July, 2006", 
  "\\s\\*\\s|(?<=[a-z]{3,13},?\\s\\d{4})\\s(?!-)")

```


```{r}
series_classification_df2 <- 
  series_classification_df |> 
  rename(
    series = `English name`,
    series_ja = `Japanese name`,
    series_abb = `Set abb.`,
    cards_total = `EN cards`,
    cards_total_ja = `JP cards`,
    release_date = `EN release date`,
    release_date_ja = `JP release date`,
         ) |> 
  select(-`EN symbol`, -`JP symbol`, -`EN no.`, -`JP no.`) |>
  # separate https://tidyr.tidyverse.org/reference/separate.html
  separate(
    cards_total_ja, 
    into = c("cards_total_ja_1", "cards_total_ja_2"),
    fill = "right"
  )
```


```{r}
# separate release dates of Japanese versions that are release as separate series
series_classification_df3 <- 
  series_classification_df2 |> 
  mutate(
    release_date_ja = 
      str_replace(
        release_date_ja,
        "\\s\\*\\s|(?<=[a-z]{3,13},?\\s\\d{4})\\s(?!-)",
        "SEPARATE"
      )) |> 
  separate(
    release_date_ja, 
    into = c("release_date_ja_1", "release_date_ja_2"),
    sep = "\\s\\*\\s|SEPARATE",
    fill = "right"
  ) |> 
  mutate(
    across(
      everything(), 
      ~ recode(
        .,
        "—" = NA_character_, 
        "Ongoing" = NA_character_)
    ),
    release_date_ja_2 = str_replace(release_date_ja_2, "\\s\\*", "")
  )
View(series_classification_df3)

```


```{r}
# test
paste0(month.name, collapse = "|")
is.vector(month.name, coll)
c("aaa", "bbb") |> paste0()
str_view_all(
  "From February 9, 2021", 
  "January|February|March|April|May|June|July|August|September|October|November|December")
str_view_all(
  "April - August, 2006", 
  "[:digit:]{4}")
str_view_all(
  "October 13th - November 26th, 2013", 
  "[:digit:]{4}")
str_view_all(
  "September, 2008 - March, 2009", 
  "[:digit:]{4}")

# https://lubridate.tidyverse.org/reference/parse_date_time.html

parse_date_time(
  x = "2021 February 21",
  orders = "ybd"
)

# run
series_classification_df4 <-
  series_classification_df3 |> 
  mutate(
    release_date_month = 
      str_extract(
        release_date,
        "January|February|March|April|May|June|July|August|September|October|November|December"
      ),
    release_date_day = 
      str_extract(
        release_date,
        "[:digit:]{1,3}(?=,)|[:digit:]{1,3}(?=[:lower:]{2})(?![:lower:]{2},)"
      ) |> replace_na(replace = "1"),
    release_date_year = 
      str_extract(
        release_date,
        "[:digit:]{4}"
      ),
    release_date = 
      str_c(
        release_date_year, 
        release_date_month, 
        release_date_day
      ) |> 
      parse_date_time(orders = "ybd"),
    release_date_month = 
      str_extract(
        release_date_ja_1,
        "January|February|March|April|May|June|July|August|September|October|November|December"
      ),
    release_date_day = 
      str_extract(
        release_date_ja_1,
        "[:digit:]{1,3}(?=,)|[:digit:]{1,3}(?=[:lower:]{2})(?![:lower:]{2},)"
      ) |> replace_na(replace = "1"),
    release_date_year = 
      str_extract(
        release_date_ja_1,
        "[:digit:]{4}"
      ),
    release_date_ja_1 = 
      str_c(
        release_date_year, 
        release_date_month, 
        release_date_day
      ) |> 
      parse_date_time(orders = "ybd"),
    release_date_month = 
      str_extract(
        release_date_ja_2,
        "January|February|March|April|May|June|July|August|September|October|November|December"
      ),
    release_date_day = 
      str_extract(
        release_date_ja_2,
        "[:digit:]{1,3}(?=,)|[:digit:]{1,3}(?=[:lower:]{2})(?![:lower:]{2},)"
      ) |> replace_na(replace = "1"),
    release_date_year = 
      str_extract(
        release_date_ja_2,
        "[:digit:]{4}"
      ),
    release_date_ja_2 = 
      str_c(
        release_date_year, 
        release_date_month, 
        release_date_day
      ) |> 
      parse_date_time(orders = "ybd"),
  )
series_classification_df4 |> colnames()
series_classification_df5 <- 
  series_classification_df4 |> 
  select(
    series_class,
    series,
    series_abb,
    series_ja,
    cards_total,
    release_date,
    cards_total_ja_1,
    cards_total_ja_2,
    release_date_ja_1,
    release_date_ja_2,
  )
series_classification_df5 |> View()
```

[Multiple observations per row](https://tidyr.tidyverse.org/articles/pivot.html#multiple-observations-per-row)を参考に、`cards_total_ja`と`release_date_ja`を一気にpivot_longerすることが…できるのでは・・・
```{r}
# 
# 

series_classification_df6 <-
  series_classification_df5 |> 
  # rowid_to_column("id") |>
  pivot_longer(
    !series_class:release_date,
    # !series_class:release_date, 
    names_to = c(".value", "ja_variation"),
    names_pattern = "(.*)_(1|2)",
    # names_sep = "_", 
    values_drop_na = TRUE
  ) |> 
  select(-ja_variation)

View(series_classification_df6)
series_classification_df6
```

#### join

表記ゆれや数日程度の`release_date`のずれがある。基本的にBulbapediaのものにあわせる
sheet名もそれに伴って書き換えなければいけないが、仕方ない
```{r}
release_dates_df3 <-
  release_dates_df2 |> 
  mutate(
    series = recode(
      series,
      `McDonalds Collection 2021` = "McDonald's Collection 2021",
      `Champions Path` = "Champion's Path",
      `Sword and Shield` = "Sword & Shield",
      `Sword and Shield Promos` = "SWSH Black Star Promos",
      `Sun and Moon` = "Sun & Moon",
      `Sun and Moon Promos` = "SM Black Star Promos",
      `Mcdonalds Collection 2015` = "McDonald's Collection 2015",
      `Mcdonalds Collection 2014` = "McDonald's Collection 2014",
      `McDonalds Collection 2012` = "McDonald's Collection 2012", # not Mcd!
      `X and Y` = "XY",
      `X and Y Promos` = "XY Black Star Promos",
      `McDonalds Collection` = "McDonald's Collection",
      `Black and White` = "Black & White", 
      `HeartGold and SoulSilver` = "HeartGold & SoulSilver"
    ),
    series = str_replace(series, "Pop", "POP")
  )
```
つぎに、Bulbapediaを母体に一緒にしつつもTrainer KitはBulbapediaのリストにはないため`series_class`に`Trainer Kit`を新設しつつ、`release_date`についてはBulbapediaを優先する。
```{r}
series_release_df1 <- full_join(
  series_classification_df6, 
  release_dates_df3,
  by = c("series")) |> 
  distinct() |> 
  mutate(
    series_class = 
      case_when(
        str_detect(series, "Trainer\\sKit") ~ "Trainer Kit", 
        TRUE ~ series_class
      ),
    
  ) 
df_series <- series_release_df1 |> 
  # select(release_date.x, release_date.y) |> 
  mutate(
    # indicate if the series is in V2.35 spreadsheet or 
    # only available on bulbagarden's list
    meta_is_bulba_only = is.na(release_date.y),
    meta_is_v235_only = is.na(release_date.x),
    release_date = 
      case_when(
        is.na(release_date.x) & !is.na(release_date.y) ~ release_date.y,
        
        !is.na(release_date.x) & is.na(release_date.y) ~ release_date.x,
        release_date.x == release_date.y ~ release_date.x,
        release_date.x != release_date.y ~ release_date.x,
        # TRUE ~ NA_Date_
      ),
      release_date.x = NULL,
      release_date.y = NULL,
      cards_total = cards_total |> as.character() |> as.integer(),
      cards_total_ja = cards_total |> as.character() |> as.integer(),
      series_class = case_when(
        series == "Pokemon GO" ~ "Special Expansion",
        TRUE ~ series_class
      )
  )

View(df_series)
```


# pokemon data

```{r}
raw_xlsx <- 
  map(
    sheet_names2,
    ~ read_xlsx(
      excel_path,
      sheet = .x,
      skip = 3,
      col_types = "text"
    )
  ) 

raw_xlsx[[`Mcdonalds Collection 2014`]]
```


```{r}
pokemon_df_list <- 
  map2(
    .x = raw_xlsx,
    .y = sheet_names2,
    ~ mutate(.data = .x, series = rep(.y, nrow(.x)))
  ) |> 
  map(
    ~ mutate(
      .data = .x,
      `Set #` = `Set #` |> as.character() # some are num, some are char
    )
  )

# check if they are all char now
pokemon_df_list[[1]]$`Set #` |> str()
pokemon_df_list[[2]]$`Set #` |> str()
everything_df_raw <- 
  pokemon_df_list |> 
  bind_rows() |> 
  filter(!is.na(Type)) |> 
  select(`Set #`, Name, Type, series)
```

### Series名をBulbapediaに揃える

```{r}
everything_df_bulbanized <- 
  everything_df_raw |> 
  mutate(
    series = recode(
      series,
      `McDonalds Collection 2021` = "McDonald's Collection 2021",
      `Champions Path` = "Champion's Path",
      `Sword and Shield` = "Sword & Shield",
      `Sword and Shield Promos` = "SWSH Black Star Promos",
      `Sun and Moon` = "Sun & Moon",
      `Sun and Moon Promos` = "SM Black Star Promos",
      `Mcdonalds Collection 2015` = "McDonald's Collection 2015",
      `Mcdonalds Collection 2014` = "McDonald's Collection 2014",
      `McDonalds Collection 2012` = "McDonald's Collection 2012", # not Mcd!
      `X and Y` = "XY",
      `X and Y Promos` = "XY Black Star Promos",
      `McDonalds Collection` = "McDonald's Collection",
      `Black and White` = "Black & White", 
      `HeartGold and SoulSilver` = "HeartGold & SoulSilver"
    ),
    series = str_replace(series, "Pop", "POP")
  )
```

### Merge series df & poke df

bulbaに揃えられたので、次にseries_typeとrelease_dateとgen目当てに合体させる

```{r}
everything_df_merged <-
  left_join(
  everything_df_bulbanized,
  df_series |> select(!ends_with("_ja")),
  by = c("series", "gen")
  ) |> 
  mutate(release_date = release_date.y, 
         release_date.y = NULL,
         release_date.x = NULL) # overwrite by Bulbapedia dates
# check how many NAs exist
everything_df_merged |> 
  summarise(across(everything(), ~ sum(is.na(.))))

View(everything_df_merged)
```

## fix typos

"Fightning", "Coloress" etc.

```{r}
everything_df_merged |> dim() # 15029 x 10
# df_pokemon <- 
#   everything_df_raw |> 
#   filter(!Type %in% c("Trainer", "Energy", "Supporter", "Item", "Stadium", "Tool", "TM", NA)) # 12349 rows
```


```{r}
# check typos

pokemon_df_summarised <- everything_df_merged |> 
  group_by(Type) |> 
  summarise(n = n()) |> 
  arrange(n |> desc())
everything_df_raw$Type |> unique()
```


TM=わざマシン(technical machine)らしい。なにそれ [ref](https://seesaawiki.jp/w/jester_the_pcg/d/%A5%EF%A5%B6%A5%DE%A5%B7%A5%F3)　~~ポケモンではないので上の方でOmitしています~~　後でします
```{r}
everything_df_typo <- everything_df_merged |> 
  mutate(
    Type = recode(Type, 
      Fightning = "Fighting",
      FIGHting = "Fighting",
      Coloress = "Colorless",
      Colorelss = "Colorless",
      Normal = "Colorless",
      Electric = "Lightning",
      Lightnijg = "Lightning",
      Lighting = "Lightning"
    )
  )
View(everything_df_typo)
types_non_pokemon <-  c("Trainer", "Energy", "Supporter", "Item", "Stadium", "Tool", "TM")
pokemon_type_ranking <- everything_df_typo |>
  filter(!Type %in% types_non_pokemon) |> 
  group_by(Type) |> 
  summarise(n = n()) |> 
  arrange(desc(n))
major_types <- pokemon_type_ranking |> 
  filter(n > 100) |> # omit type+type pokemons
  select(Type) |> 
  pull()
mixed_types <- pokemon_type_ranking |> 
  filter(n <= 100) |> # select type+type pokemons
  select(Type) |> 
  pull()
```

### color the types

[kawaii](https://pokepalettes.com/)
[palettetown and pokepal](https://github.com/timcdlucas/palettetown) not so much helpful here
[r base color sucks](https://bookdown.org/hneth/ds4psy/D-3-apx-colors-basics.html)
[manually pick colour](https://codepen.io/HunorMarton/details/eWvewo)


```{r}
everything_df_coloured <- everything_df_typo |> 
  mutate(
    colour = recode(
      Type, 
      Water = "#80DDFF",
      Grass = "#80FF82",
      Psychic = "#361C63",
      Colorless = "#D1D1D1",
      Fighting = "#8F441E",
      Fire = "#FF0F23",
      Lightning = "#F0C800",
      Darkness = "#1D1D1B", # black
      Metal = "#463F43", # silver
      Dragon = "#ABAD00", # gold
      Fairy = "#FF4DAF", # purple
    ),
    Type2 = case_when(
      Type %in% mixed_types ~ "mixed",
      TRUE ~ Type),
    is_pokemon = !Type %in% types_non_pokemon
  ) 

```

*colours*

```{r}
colours_named_vector <- 
  c("Water" = "#80DDFF",
      "Grass"= "#80FF82",
      "Psychic" = "#361C63",
      "Colorless" = "#D1D1D1",
      "Fighting" = "#8F441E",
      "Fire" = "#FF0F23",
      "Lightning" = "#F0C800",
      "Darkness" = "#1D1D1B", # black
      "Metal" = "#463F43", # silver
      "Dragon" = "#ABAD00", # gold
      "Fairy" = "#FF4DAF", # purple
      "mixed" = "black"
    )
```

### repair set numbers that are converted to Dates

test

```{r}
# check problems
"2022-04-22" |> 
  ymd() |> 
  {str_c(month(.), "/", day(.))}
# pop series 9 1/17 Garchomp
"44213.0" |> 
  as.numeric() |> 
  as.Date(origin = "1899/12/30") %>% # excel date starts from 12/30
  {str_c(month(.), "/", day(.))}
```

regexについては[koko](https://rdrr.io/cran/stringi/man/about_search_regex.html)

```{r}
everything_df_date <- everything_df_coloured |> 
  # filter(series %in% c("EX Trainer Kit 2", "Pop Series 9")) |>
  mutate(
    set = 
      case_when(
        str_detect(
          `Set #`,
          pattern = "\\d{4}-\\d{2}-\\d{2}"
        ) ~
        # use {} to use dot operator more than once,
        # and use %>% instead of base |> to do so. base pipe doesn't support it
        ymd(`Set #`) %>%
          {str_c(month(.), "/", day(.))}, # 11086 failed to parse
        str_detect(
          `Set #`,
          pattern = "\\d{5}.0"
        ) ~
        as.character(`Set #`) |> 
          as.numeric() |>
          as.Date(origin = "1899/12/30") %>%
          {str_c(month(.), "/", day(.))}, # NAs introduced by coersion
        TRUE ~ `Set #`
      )
  ) |> 
  select(set, everything(), -`Set #`)
View(everything_df_date)
```
Warningsはでるけど、きれいにフォーマットできている気がするので大丈夫かなと…。

## card number, promo or not

[regex stringr](https://stringr.tidyverse.org/articles/regular-expressions)
[cheat sheet](https://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_strings.pdf) look aroundsが使えそう
```{r}
# https://stackoverflow.com/questions/6109882/regex-match-all-characters-between-two-strings
str_view_all("BH233/BH244", "(?<=[:alpha:]{0,8})\\d+(?=/)")
str_view_all("50a/147", "(?<=[:alpha:]{0,8})\\d+(?=[:lower:]{0,1}/)")

everything_df_card_no <- everything_df_date |> 
  mutate(
    card_number = 
      case_when(
        str_detect(set, ".?/.?") ~
          str_extract(
            set, 
            "(?<=[:alpha:]{0,3})\\d+(?=[:lower:]{0,1}/)"
          ) |> 
          as.integer(),
        str_detect(set, "\\d+") ~
          str_extract(set, "\\d+") |> as.integer(),
        str_detect(set, "\\d+$") ~
          str_extract(set, "\\d+$") |> as.integer(),
        # str_detect(set, "[A-Z]+\\d+") ~
        #   str_extract(set, "\\d")
        TRUE ~ NA_integer_
      ),
    cards_total_official = 
      if_else(
        str_detect(set, ".?/.?"),
        str_extract(
          set,
          "(?<=/[:alpha:]{0,3})\\d+"
        ) |> 
        as.integer(),
        NA_integer_
      ),
    is_secret_card =  (card_number > cards_total_official) # !is.na(card_total) &&
  )
everything_df_card_no2 <- 
  everything_df_card_no |> 
  select(
    Name, 
    gen, 
    series, 
    release_date, 
    set, 
    card_number, 
    cards_total_official, 
    starts_with("is_"),  
    everything()
  )
everything_df_card_no2 |> View()
```




# name the final df df, and export

```{r}
df <- everything_df_card_no2
```


# write

```{r}

sheet_write(
  df_series,
  ss = ss_output,
  sheet = "series_global"
  )
sheet_write(
  df, 
  ss = ss_output,
  sheet = "cards"
  )
sheet_write(
  df |> filter(is_pokemon), 
  ss = ss_output,
  sheet = "cards: pokemon"
  )
sheet_write(
  release_dates_df2, 
  ss = ss_output,
  sheet = "releases"
  )
df_series
```




